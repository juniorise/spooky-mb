// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'core/db/adapters/objectbox/entities.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 2217846337191551186),
      name: 'StoryObjectBox',
      lastPropertyId: const IdUid(12, 1774290527723560338),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2629227701020765726),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 8486270506906068977),
            name: 'version',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1199921630310041680),
            name: 'year',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1236168008218410742),
            name: 'month',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4788746244381520009),
            name: 'day',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3828618571950125078),
            name: 'starred',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1096917001867929067),
            name: 'feeling',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5912725222923693600),
            name: 'createdAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 2617816703588571391),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 8305853190929944973),
            name: 'movedToBinAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 5105935544248212073),
            name: 'changes',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 1774290527723560338),
            name: 'type',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 2217846337191551186),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    StoryObjectBox: EntityDefinition<StoryObjectBox>(
        model: _entities[0],
        toOneRelations: (StoryObjectBox object) => [],
        toManyRelations: (StoryObjectBox object) => {},
        getId: (StoryObjectBox object) => object.id,
        setId: (StoryObjectBox object, int id) {
          object.id = id;
        },
        objectToFB: (StoryObjectBox object, fb.Builder fbb) {
          final feelingOffset =
              object.feeling == null ? null : fbb.writeString(object.feeling!);
          final changesOffset = fbb.writeList(
              object.changes.map(fbb.writeString).toList(growable: false));
          final typeOffset = fbb.writeString(object.type);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.version);
          fbb.addInt64(2, object.year);
          fbb.addInt64(3, object.month);
          fbb.addInt64(4, object.day);
          fbb.addBool(5, object.starred);
          fbb.addOffset(6, feelingOffset);
          fbb.addInt64(7, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(8, object.updatedAt.millisecondsSinceEpoch);
          fbb.addInt64(9, object.movedToBinAt?.millisecondsSinceEpoch);
          fbb.addOffset(10, changesOffset);
          fbb.addOffset(11, typeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final movedToBinAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 22);
          final object = StoryObjectBox(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              version:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              type: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 26, ''),
              year: const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              month:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0),
              day: const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
              starred: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 14),
              feeling: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              createdAt: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0)),
              updatedAt: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0)),
              movedToBinAt: movedToBinAtValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(movedToBinAtValue),
              changes:
                  const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                      .vTableGet(buffer, rootOffset, 24, []));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [StoryObjectBox] entity fields to define ObjectBox queries.
class StoryObjectBox_ {
  /// see [StoryObjectBox.id]
  static final id =
      QueryIntegerProperty<StoryObjectBox>(_entities[0].properties[0]);

  /// see [StoryObjectBox.version]
  static final version =
      QueryIntegerProperty<StoryObjectBox>(_entities[0].properties[1]);

  /// see [StoryObjectBox.year]
  static final year =
      QueryIntegerProperty<StoryObjectBox>(_entities[0].properties[2]);

  /// see [StoryObjectBox.month]
  static final month =
      QueryIntegerProperty<StoryObjectBox>(_entities[0].properties[3]);

  /// see [StoryObjectBox.day]
  static final day =
      QueryIntegerProperty<StoryObjectBox>(_entities[0].properties[4]);

  /// see [StoryObjectBox.starred]
  static final starred =
      QueryBooleanProperty<StoryObjectBox>(_entities[0].properties[5]);

  /// see [StoryObjectBox.feeling]
  static final feeling =
      QueryStringProperty<StoryObjectBox>(_entities[0].properties[6]);

  /// see [StoryObjectBox.createdAt]
  static final createdAt =
      QueryIntegerProperty<StoryObjectBox>(_entities[0].properties[7]);

  /// see [StoryObjectBox.updatedAt]
  static final updatedAt =
      QueryIntegerProperty<StoryObjectBox>(_entities[0].properties[8]);

  /// see [StoryObjectBox.movedToBinAt]
  static final movedToBinAt =
      QueryIntegerProperty<StoryObjectBox>(_entities[0].properties[9]);

  /// see [StoryObjectBox.changes]
  static final changes =
      QueryStringVectorProperty<StoryObjectBox>(_entities[0].properties[10]);

  /// see [StoryObjectBox.type]
  static final type =
      QueryStringProperty<StoryObjectBox>(_entities[0].properties[11]);
}
